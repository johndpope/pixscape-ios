// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ARKit;
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import SceneKit;
@import UIKit;
#endif

#import <ScapeKit/ScapeKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ScapeKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class SCNScene;
@class NSCoder;

SWIFT_CLASS("_TtC8ScapeKit9SCKArView")
@interface SCKArView : ARSCNView
@property (nonatomic, readonly, strong) SCNScene * _Nonnull currentScene;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// public
/// The SCKConsole allows you to print your own logging to the a visual debugging console.
SWIFT_CLASS("_TtC8ScapeKit10SCKConsole")
@interface SCKConsole : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@protocol SCKScapeClientBuilder;

/// public
/// The SCKScape class is the entry point to use ScapeKit.
SWIFT_CLASS("_TtC8ScapeKit8SCKScape")
@interface SCKScape : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SCKScapeClientBuilder> _Nonnull scapeClientBuilder;)
+ (id <SCKScapeClientBuilder> _Nonnull)scapeClientBuilder SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@end

@class SCKScapeSession;
@protocol SCKArSession;
@protocol SCKScapeClientObserver;

/// public
/// The SCKScapeClient protocol is ScapeKitâ€™s entry point.
/// It provides access to the feature classes in the SDK: SCKScapeSession and SCKARSession.
SWIFT_PROTOCOL("_TtP8ScapeKit14SCKScapeClient_")
@protocol SCKScapeClient
@property (nonatomic) BOOL isStarted;
@property (nonatomic, readonly, strong) SCKScapeSession * _Nullable scapeSession;
@property (nonatomic, readonly, strong) id <SCKArSession> _Nullable arSession;
@property (nonatomic, weak) id <SCKScapeClientObserver> _Nullable scapeClientObserver;
- (void)start;
- (void)stop;
- (void)terminate;
- (void)startWithClientStarted:(void (^ _Nonnull)(void))clientStarted clientFailed:(void (^ _Nonnull)(NSString * _Nonnull))clientFailed;
- (void)stopWithClientStopped:(void (^ _Nonnull)(void))clientStopped clientFailed:(void (^ _Nonnull)(NSString * _Nonnull))clientFailed;
- (void)terminateWithClientStopped:(void (^ _Nonnull)(void))clientStopped clientFailed:(void (^ _Nonnull)(NSString * _Nonnull))clientFailed;
@end


/// public
/// The SCKScapeClientBuilder protocol builds a new SCKScapeClient instance.
/// To construct a SCKScapeClient, the required configuration parameters are:
/// <ul>
///   <li>
///     Application Key
///     It is optional to specify:
///   </li>
///   <li>
///     Debug Support (for console logs and visual logs)
///   </li>
///   <li>
///     AR Support (for using the simple SCKArSession wrapper built on top of ARKit)
///   </li>
///   <li>
///     Legacy Maps (for using the legacy maps in the area you are trying to use ScapeKit)
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP8ScapeKit21SCKScapeClientBuilder_")
@protocol SCKScapeClientBuilder
- (id <SCKScapeClientBuilder> _Nonnull)withApiKey:(NSString * _Nonnull)apiKey SWIFT_WARN_UNUSED_RESULT;
- (id <SCKScapeClientBuilder> _Nonnull)withDebugSupport:(BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
- (id <SCKScapeClientBuilder> _Nonnull)withArSupport:(BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
- (id <SCKScapeClientBuilder> _Nonnull)withLegacyMapsSupport:(BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
/// public
/// Creates the resulting SCKScapeClient.
- (id <SCKScapeClient> _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// public
/// A SCKScapeClientObserver handles client state changes
SWIFT_PROTOCOL("_TtP8ScapeKit22SCKScapeClientObserver_")
@protocol SCKScapeClientObserver
- (void)onClientStarted:(id <SCKScapeClient> _Nonnull)scapeClient;
- (void)onClientStopped:(id <SCKScapeClient> _Nonnull)scapeClient;
- (void)onClientFailed:(id <SCKScapeClient> _Nonnull)scapeClient errorMessage:(NSString * _Nonnull)errorMessage;
@end




@interface SCKScapeOrientation (SWIFT_EXTENSION(ScapeKit))
/// public
/// Convert ScapeKit orientation to an actual SceneKit Quaternion
- (SCNQuaternion)toSNQuaternion SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)yaw SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)pitch SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)roll SWIFT_WARN_UNUSED_RESULT;
@end

@class ARFrame;

@interface SCKScapeSession (SWIFT_EXTENSION(ScapeKit))
/// (public)
/// Set the ar frame manually (when SCKArSession is not used)
- (void)setARFrame:(ARFrame * _Nonnull)arFrame :(CGSize)viewportSize;
@end















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
